
cleanEnvironment = {}
for k, v in pairs(_G) do
	cleanEnvironment[k] = v
end

local Extension = function(path, addDot)
	if not path then
		return nil
	elseif not string.find(fs.getName(path), '%.') then
		if not addDot then
			return fs.getName(path)
		else
			return ''
		end
	else
		local _path = path
		if path:sub(#path) == '/' then
			_path = path:sub(1,#path-1)
		end
		local extension = _path:gmatch('%.[0-9a-z]+$')()
		if extension then
			extension = extension:sub(2)
		else
			--extension = nil
			return ''
		end
		if addDot then
			extension = '.'..extension
		end
		return extension:lower()
	end
end

-- TODO: get a better method
local removeExtension = function(path)
	if path:sub(1,1) == '.' then
		return path
	end
	local extension = Extension(path)
	if extension == path then
		return fs.getName(path)
	end
	return string.gsub(path, extension, ''):sub(1, -2)
end

local function log(...)
	if Log then
		Log.i(...)
	end
	if isDebug or doLog then
		print(...)
	end
end

local function loadAPI(_sPath)
	local sName = removeExtension(fs.getName( _sPath ))
	log('Loading: '.._sPath)
	local tEnv = {isStartup = true }
	setmetatable( tEnv, { __index = getfenv()} )
	local fnAPI, err = loadfile( _sPath )
	if fnAPI then
		setfenv( fnAPI, tEnv )
		fnAPI()
	else
		printError( err )
		log('Error: '..err)
		return false
	end
	
	local tAPI = {}
	for k,v in pairs( tEnv ) do
		tAPI[k] =  v
	end
	
	if not tAPI then
		log('Could not find API: '..sName)
		error('Could not find API: '..sName)
	end

	getfenv()[sName] = tAPI
	return true
end


loadAPI('/System/APIs/Log.lua')
Log.Initialise()
loadAPI('/System/API/Bedrock.lua')

if type(term.native) == 'function' then
	local cur = term.current()
	restoreTerm = function()term.redirect(cur)end
else
	restoreTerm = function()term.restore()end
end

os.run(getfenv(), '/System/main.lua')