oldTerm = term

--[[
term.setBackgroundColour(colours.white)
term.setTextColour(colours.black)
term.clear()
]]--

--local _, err = pcall(function()

local tAPIsLoading = {}


function LoadAPI(_sPath)
	local sName = fs.getName( _sPath )
	if tAPIsLoading[sName] == true then
		printError( "API "..sName.." is already being loaded" )
		return false
	end
	tAPIsLoading[sName] = true
		
	local tEnv = {}
	setmetatable( tEnv, { __index = getfenv() } )
	local fnAPI, err = loadfile( _sPath )
	if fnAPI then
		setfenv( fnAPI, tEnv )
		fnAPI()
	else
		printError( err )
        tAPIsLoading[sName] = nil
		return false
	end
	
	local tAPI = {}
	for k,v in pairs( tEnv ) do
		tAPI[k] =  v
	end
	
	getfenv()[sName] = tAPI

	tAPIsLoading[sName] = nil
	return true
end

term.setCursorPos(1,1)
root = ''

function PrintCentered(text, y)
    local w, h = term.getSize()
    x = math.ceil(math.ceil((w / 2) - (#text / 2)), 0)+1
    term.setCursorPos(x, y)
    print(text)
end

function LoadingScreen()
	local screenWidth, screenHeight = term.getSize()
	term.setBackgroundColour(colours.white)	
	term.clear()
	local x = (screenWidth - 14) / 2
	local y = (screenHeight - 9) / 2

	local text = 'OneOS by oeed'
	term.setCursorPos((screenWidth - #text) / 2, y + 13)
	term.setTextColour(colours.blue)
	term.write(text)

	local currentImage = -1
	local totalAPIs = #fs.list(root .. 'System/API/')

	for _, file in pairs(fs.list(root .. 'System/API/')) do
		if string.sub(file,1,1) ~= "." then
			--print('Loading: ' .. file)
			if math.floor(_*(8/totalAPIs)) ~= currentImage then
				currentImage = math.floor(_*(8/totalAPIs))
				local image = paintutils.loadImage('System/Images/Boot/boot'..currentImage)
				paintutils.drawImage(image, x, y)
			end
			term.setBackgroundColor(colours.white)
			term.setCursorPos(1, y + 11)
			
			term.clearLine()
			PrintCentered('Loading API '..file, y + 11)
			--sleep(0)
			if not LoadAPI(root .. 'System/API/' .. file) then
				term.setTextColour(colours.red)
				PrintCentered('Error While Loading API '..file, y + 11)
				term.setCursorPos(1, 1)
				return false
			end
		end
	end
	sleep(0.1)
	return true
end

if LoadingScreen() then

	os.run(getfenv(), '/System/main')

	local ok, err = pcall(Initialise)

	if not ok then
		term.setBackgroundColor(colours.red)
		term.setCursorPos(1,1)
		term.write(' ')
		term.setBackgroundColor(colours.lightGrey)
		term.setTextColor(colours.black)
		print('Error')
		--[[
	term.setBackgroundColor(colours.lightGrey)
		term.setTextColor(colours.black)
		term.clear()
		print('Error')
		print(err)
	]]--
	end
	--[[end)
	if err then
		local w, h = term.getSize()
		local x = w/2
		local y = h/2
		local warning = "A fatal error occured"
		term.setCursorPos(x-(#warning/2), y)
		term.clearLine()
		term.write(warning)
		print()
		print()
		term.setTextColour(colours.red)
		print(err)
	end]]
end