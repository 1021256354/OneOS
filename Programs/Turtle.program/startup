if OneOS then
	--running under OneOS
	OneOS.ToolBarColour = colours.grey
	OneOS.ToolBarTextColour = colours.white
end

os.loadAPI('/System/API/Drawing', true)
os.loadAPI('/System/API/Button', true)
os.loadAPI('/System/API/TextBox', true)
os.loadAPI('/System/API/TextInput', true)
os.loadAPI('/System/API/Peripheral', true)
os.loadAPI('/System/API/Wireless', true)
os.loadAPI('/System/API/Turtle', true)

local dir = shell.getRunningProgram()
dir = dir:sub(1, #dir-7)

drawTimer = nil

Current = {
	Clicks = {},
	Page = 'home',
	ConnectionStatus = 'Connecting...',
	State = '...',
	Miner = {},
	Excavator = {},
	HomeY = 63,
	Title1 = "..",
	Title2 = "",
	Title3 = "",
	NextPage = nil,
	Input = nil
}

os.loadAPI('miner')
os.loadAPI('excavator')


Images = {
	level1 = Drawing.LoadImage(dir..'level1.nft'),
	level2 = Drawing.LoadImage(dir..'level2.nft'),
	level3 = Drawing.LoadImage(dir..'level3.nft'),
	level4 = Drawing.LoadImage(dir..'level4.nft'),
}

Events = {
	
}

InterfaceElements = {
	
}

function RunJob(func)
	parallel.waitForAny(func.Start, function()sleep(5000)end)
	print('Done')
end

function Initialise()
	--OneOS.ToolBarColour = colours.grey
	--OneOS.ToolBarTextColour = colours.white
	Wireless.Initialise()
	EventRegister('mouse_click', TryClick)
	EventRegister('mouse_drag', TryClick)
	EventRegister('monitor_touch', TryClick)
	EventRegister('key', HandleKey)
	EventRegister('char', HandleKey)
	EventRegister('timer', Update)
	EventRegister('modem_message', function(...)print(...)Wireless.HandleMessage(...) end)

	--if turtle then
		Current.ConnectionStatus = 'Local Control'
--	end
	if not turtle then
		Drawing.Clear(colours.grey)
		Drawing.DrawCharactersCenter(nil, -1, nil, nil, 'This program must be used on a turtle.', colours.white, colours.grey)
		Drawing.DrawCharactersCenter(nil, 1, nil, nil, 'Click anywhere to close.', colours.white, colours.grey)
		Drawing.DrawBuffer()
		os.pullEvent('mouse_click')
		OneOS.Close()
	end

	Wireless.Responder = function(event, side, channel, replyChannel, message, distance)
		if channel == Wireless.Channels.TurtleRemote then
			local reply = Turtle.HandleMessage(message.content)
			if reply then
				Turtle.Reply(reply, message.messageID)
			end
		end
	end

	LoadPage('home')
	Draw()
	EventHandler()
end

function LoadPage(page)
	miner2OkButton = nil
	InterfaceElements = {}

	if page == 'home' then
		local rows = 2
		local buttonWidth = (Drawing.Screen.Width-3) / 2
		local buttonHeight = 3
		local x1 = 2
		local x2 = x1 + buttonWidth + 1
		local yStart = (Drawing.Screen.Height - (rows * (buttonHeight + 1)))/2 + 3
		local backgroundColour = colours.lightGrey
		local textColour = colours.white
		Current.Page = page
		Button:Initialise(x1, yStart, buttonWidth, buttonHeight, backgroundColour, textColour, nil, nil, nil, function() LoadPage('miner1') end, 'Miner'):Register()
		Button:Initialise(x1, yStart + (buttonHeight + 1), buttonWidth, buttonHeight, backgroundColour, textColour, nil, nil, nil, function() LoadPage('excavator1') end, 'Excavator'):Register()
		Button:Initialise(x2, yStart, buttonWidth, buttonHeight, backgroundColour, textColour, nil, nil, nil, function() LoadPage('builder') end, 'Builder'):Register()
		Button:Initialise(x2, yStart + (buttonHeight + 1), buttonWidth, buttonHeight, backgroundColour, textColour, nil, nil, nil, function() LoadPage('farmer') end, 'Farmer'):Register()
	elseif page == 'miner1' then
		Current.Miner = {
			useChest = true,
			safeReturn = true,
			autoRefuel = true,
			level = 4
		}
		Current.Page = page
		local buttonX = 1
		local yStart = (Drawing.Screen.Height - 6)/2 + 1
		Button:Initialise(Drawing.Screen.Width - (#'Start'+3) - 3, Drawing.Screen.Height - 1, nil, nil, colours.lightGrey, colours.white, nil, nil, nil, function() if Current.Miner.useChest then Current.NextPage = 'miner2' else Current.NextPage = 'miner3' end LoadPage('refuel') end, 'Start'):Register()
		Button:Initialise(2, yStart, nil, nil, colours.lightGrey, colours.white, nil, nil, nil, function() end, 'Auto Refuel', Current.Miner.autoRefuel):Register()
		Button:Initialise(2, yStart+3, nil, nil, colours.lightGrey, colours.white, nil, nil, nil, function()  end, 'Use Chest', Current.Miner.useChest):Register()
		Button:Initialise(2, yStart+6, nil, nil, colours.lightGrey, colours.white, nil, nil, nil, function()  end, 'Safe Return', Current.Miner.safeReturn):Register()
		Button:Initialise(2, 2, nil, nil, colours.lightGrey, colours.white, nil, nil, nil, function()LoadPage('home')end, '<'):Register()
	elseif page == 'refuel' then
		Current.Page = page
		refuelOkButton = Button:Initialise(Drawing.Screen.Width - (#'Done'+3), Drawing.Screen.Height - 1, nil, nil, colours.lightGrey, colours.white, nil, nil, nil, function()  LoadPage(Current.NextPage) end, 'Done'):Register()
		Button:Initialise(Drawing.Screen.Width - (#'Go Back'+3) - 7, Drawing.Screen.Height - 1, nil, nil, colours.lightGrey, colours.white, nil, nil, nil, function() LoadPage('miner1') end, 'Go Back'):Register()
	elseif page == 'miner2' then
		Current.Page = page
		miner2OkButton = Button:Initialise(Drawing.Screen.Width - (#'Ok'+3), Drawing.Screen.Height - 1, nil, nil, colours.lightGrey, colours.white, nil, nil, nil, function() LoadPage('miner3') end, 'Ok'):Register()
		Button:Initialise(Drawing.Screen.Width - (#'Go Back'+3) - 5, Drawing.Screen.Height - 1, nil, nil, colours.lightGrey, colours.white, nil, nil, nil, function() LoadPage('refuel') end, 'Go Back'):Register()
	elseif page == 'miner3' then
		Current.Page = page
		Button:Initialise(Drawing.Screen.Width - (#'Go Home'+3), Drawing.Screen.Height - 1, nil, nil, colours.lightGrey, colours.white, nil, nil, nil, function() LoadPage('miner3') end, 'Go Home'):Register()
		Button:Initialise(Drawing.Screen.Width - (#'Stop Now'+3) - 10, Drawing.Screen.Height - 1, nil, nil, colours.lightGrey, colours.white, nil, nil, nil, function() LoadPage('miner1') end, 'Stop Now'):Register()
		Draw()
		RunJob(miner)
	elseif page == 'excavator1' then
		Current.Excavator = {
			width = 5,
			length = 5,
			depth = 5,
			safeReturn = true,
			autoRefuel = true,
		}
		Current.Page = page
		local buttonX = 1
		local yStart = (Drawing.Screen.Height - 6)/2 + 1
		Button:Initialise(Drawing.Screen.Width - (#'Start'+3) + 1, Drawing.Screen.Height - 1, nil, nil, colours.lightGrey, colours.white, nil, nil, nil, function() if Current.Miner.useChest then Current.NextPage = 'miner2' else Current.NextPage = 'miner3' end LoadPage('refuel') end, 'Start'):Register()
		Button:Initialise(2, yStart+3, nil, nil, colours.lightGrey, colours.white, nil, nil, nil, function() end, 'Auto Refuel', Current.Excavator.autoRefuel):Register()
		Button:Initialise(2, yStart+6, nil, nil, colours.lightGrey, colours.white, nil, nil, nil, function()  end, 'Safe Return', Current.Excavator.safeReturn):Register()
		Button:Initialise(2, 2, nil, nil, colours.lightGrey, colours.white, nil, nil, nil, function()LoadPage('home')end, '<'):Register()
		TextBox:Initialise(8, yStart+1, 5, 1, nil, '5', colours.white, nil, function(self) Current.Input = self.TextInput Current.Excavator.width = tonumber(self.TextInput) end, true):Register()
		TextBox:Initialise(21, yStart+1, 5, 1, nil, '5', colours.white, nil, function(self) Current.Input = self.TextInput Current.Excavator.height = tonumber(self.TextInput) end, true):Register()
		TextBox:Initialise(33, yStart+1, 5, 1, nil, '5', colours.white, nil, function(self) Current.Input = self.TextInput Current.Excavator.height = tonumber(self.TextInput) end, true):Register()
	end
end

function DrawPage()
	Drawing.Clear(colours.grey)
	if Current.Page == 'home' then
		Drawing.DrawCharactersCenter(nil, - 3, nil, nil, 'Select a turtle job', colours.white, colours.grey)
	elseif Current.Page == 'miner1' then
		Drawing.DrawCharactersCenter(1, - 5, nil, nil, 'Mines an area below ground', colours.white, colours.grey)
		Drawing.DrawCharactersCenter(1, - 4, nil, nil, 'for ore, stone, etc', colours.white, colours.grey)
		Drawing.DrawCharacters(2, (Drawing.Screen.Height - 6)/2 + 2, "Refuel using found coal", colours.white, colours.grey)
		Drawing.DrawCharacters(2, (Drawing.Screen.Height - 6)/2 + 5, "Put found items in a chest", colours.white, colours.grey)
		Drawing.DrawCharacters(2, (Drawing.Screen.Height - 6)/2 + 8, "Return before", colours.white, colours.grey)
		Drawing.DrawCharacters(2, (Drawing.Screen.Height - 6)/2 + 9, "running out of fuel", colours.white, colours.grey)

		Drawing.DrawImage(Drawing.Screen.Width - 2, 1, Images.level1, 3, 3)
		Drawing.DrawImage(Drawing.Screen.Width - 2, 4, Images.level2, 3, 3)
		Drawing.DrawImage(Drawing.Screen.Width - 2, 7, Images.level3, 3, 3)
		Drawing.DrawImage(Drawing.Screen.Width - 2, 10, Images.level4, 3, 3)

		local selctedY = (3 * Current.Miner.level)-2
		Drawing.DrawBlankArea(Drawing.Screen.Width-3, selctedY, 1, 3, colours.blue)
		Drawing.WriteToBuffer(Drawing.Screen.Width-3, selctedY+1, ">", colours.white, colours.blue)
		RegisterClick({
			X = Drawing.Screen.Width - 2,
			Y = 1,
			Width = 3,
			Height = 12,
			Click = function(_, _, x, y)
				Current.Miner.level = math.ceil(y / 3)
				return true
			end
		})
	elseif Current.Page == 'refuel' then
		Turtle.Refuel()

		local titleText = 'Refuel your turtle?'
		local subtitle1 = 'If you want to, you can add fuel to'
		local subtitle2 = 'any slot of the turtle\'s inventory'
		local subtitle3 = 'to allow to go further.'
		local info = 'The turtle has fuel to move '..Turtle.FuelLevel()..' blocks'

		if CheckRefuel() then
			refuelOkButton.TextColour = colours.white
		else
			refuelOkButton.TextColour = colours.grey
			titleText = 'Turtle requires more fuel!'
			subtitle1 = 'Your turtle needs more fuel'
			subtitle2 = 'to allow it to continue. Add'
			subtitle3 = 'some to any slot.'
			info = 'The turtle has fuel to move '..Turtle.FuelLevel()..' blocks'
		end

		Drawing.DrawCharactersCenter(1, - 4, nil, nil, titleText, colours.white, colours.grey)
		Drawing.DrawCharactersCenter(1, - 2, nil, nil, subtitle1, colours.white, colours.grey)
		Drawing.DrawCharactersCenter(1, - 1, nil, nil, subtitle2, colours.white, colours.grey)
		Drawing.DrawCharactersCenter(1, 0, nil, nil, subtitle3, colours.white, colours.grey)
		Drawing.DrawCharactersCenter(1, 2, nil, nil, info, colours.white, colours.grey)
	elseif Current.Page == 'miner2' then
		if CheckMiner2() then
			miner2OkButton.TextColour = colours.white
		else
			miner2OkButton.TextColour = colours.grey
		end

		Drawing.DrawCharactersCenter(1, - 5, nil, nil, 'You have selected to use a chest.', colours.white, colours.grey)
		Drawing.DrawCharactersCenter(1, - 3, nil, nil, 'Please empty the turtle\'s inventory' , colours.white, colours.grey)
		Drawing.DrawCharactersCenter(1, - 2, nil, nil, 'and place a chest (or 2) in a slot.' , colours.white, colours.grey)
		Drawing.DrawCharactersCenter(1, 0, nil, nil, 'If you already placed the chest(s)' , colours.white, colours.grey)
		Drawing.DrawCharactersCenter(1, 1, nil, nil, 'break it and place it in the turtle.' , colours.white, colours.grey)
		Drawing.DrawCharactersCenter(1, 3, nil, nil, 'An EnderChest will not work.' , colours.white, colours.grey)
		
	elseif Current.Page == 'miner3' then
		DrawStatusBar()
		Drawing.DrawCharactersCenter(1, - 3, nil, nil, Current.Title1 , colours.white, colours.grey)
		Drawing.DrawCharactersCenter(1, - 1, nil, nil, Current.Title2, colours.white, colours.grey)
		Drawing.DrawCharactersCenter(1, 0, nil, nil, Current.Title3, colours.white, colours.grey)
	elseif Current.Page == 'excavator1' then
		Drawing.DrawCharactersCenter(1, - 5, nil, nil, 'Digs an area below and', colours.white, colours.grey)
		Drawing.DrawCharactersCenter(1, - 4, nil, nil, 'to the right of the Turtle', colours.white, colours.grey)
		Drawing.DrawCharacters(2, (Drawing.Screen.Height - 6)/2 + 2, "Width", colours.white, colours.grey)
		Drawing.DrawCharacters(14, (Drawing.Screen.Height - 6)/2 + 2, "Height", colours.white, colours.grey)
		Drawing.DrawCharacters(27, (Drawing.Screen.Height - 6)/2 + 2, "Depth", colours.white, colours.grey)
		Drawing.DrawCharacters(2, (Drawing.Screen.Height - 6)/2 + 5, "Refuel using found coal", colours.white, colours.grey)
		Drawing.DrawCharacters(2, (Drawing.Screen.Height - 6)/2 + 8, "Return before", colours.white, colours.grey)
		Drawing.DrawCharacters(2, (Drawing.Screen.Height - 6)/2 + 9, "running out of fuel", colours.white, colours.grey)

	end
end

function CheckMiner2()
	local totalSlots = 0
	local totalItems = 0
	local lastSlot = 0
	for i = 1, 16 do
		local count = Turtle.ItemCount(i)
		if count > 0 then
			totalSlots = totalSlots + 1
			totalItems = totalItems + count
		end
	end

	if totalSlots == 1 and (totalItems == 1 or totalItems == 2) then
		return true
	else
		return false
	end
end

function CheckRefuel()
	return Turtle.FuelLevel() > 1
end

function DrawStatusBar()
	if turtle then
		Current.State = Turtle.GetState()
	end
	Drawing.DrawCharacters((Drawing.Screen.Width-#Current.ConnectionStatus)+1, 1, Current.ConnectionStatus, colours.lightGrey, colours.grey)
	Drawing.DrawCharacters(1, 1, Current.State, colours.lightGrey, colours.grey)
end

function Draw()
	Current.Clicks = {}

	DrawPage()

	for i, elem in ipairs(InterfaceElements) do
		if elem.Draw then
			elem:Draw()
		end
	end

--	DrawStatusBar()

	Drawing.DrawBuffer()
	if Current.Input then
		term.setCursorPos(Current.CursorPos[1], Current.CursorPos[2])
		term.setCursorBlink(true)
		term.setTextColour(Current.CursorColour)
	else
		term.setCursorBlink(false)
	end

	if Current.Page == 'refuel' then
		drawTimer = os.startTimer(0.5)
	elseif Current.Page == 'miner2' then
		drawTimer = os.startTimer(0.5)
	elseif Current.Page == 'miner3' then
		--drawTimer = os.startTimer(1)
	end
end

MainDraw = Draw

function Update(_, timer)
	if timer == drawTimer then
		Draw()
	end
end

function RegisterElement(elem)
	table.insert(InterfaceElements, elem)
end

function UnregisterElement(elem)
	for i, e in ipairs(InterfaceElements) do
		if elem == e then
			InterfaceElements[i] = nil
		end
	end
end

function RegisterClick(elem)
	table.insert(Current.Clicks, elem)
end

function CheckClick(object, x, y)
	local pos = GetAbsolutePosition(object)
	if pos.X <= x and pos.Y <= y and  pos.X + object.Width > x and pos.Y + object.Height > y then
		return true
	end
end

function DoClick(event, object, side, x, y)
	if object and CheckClick(object, x, y) then
		return object:Click(side, x - object.X + 1, y - object.Y + 1)
	end	
end

function TryClick(event, side, x, y)
	for i, object in ipairs(Current.Clicks) do
		if DoClick(event, object, side, x, y) then
			Draw()
			return
		end		
	end
end

function HandleKey(...)
	local args = {...}
	local event = args[1]
	local keychar = args[2]
	if Current.Input then
		if event == 'char' then
			Current.Input:Char(keychar)
		elseif event == 'key' then
			Current.Input:Key(keychar)
		end
	end
end

function GetAbsolutePosition(obj)
	if not obj.Parent then
		return {X = obj.X, Y = obj.Y}
	else
		local pos = GetAbsolutePosition(obj.Parent)
		local x = pos.X + obj.X - 1
		local y = pos.Y + obj.Y - 1
		return {X = x, Y = y}
	end
end

function EventRegister(event, func)
	if not Events[event] then
		Events[event] = {}
	end

	table.insert(Events[event], func)
end

function EventHandler()
	while true do
		local event = { coroutine.yield() }
		if Events[event[1]] then
			for i, e in ipairs(Events[event[1]]) do
				e(event[1], event[2], event[3], event[4], event[5])
			end
		end
	end
end

Initialise()