_print = print

isMenuVisible = false
currentPage = ''
listItems = {}

function print(_string)
	term.setTextColour(colours.black)
	term.setBackgroundColour(colours.white)
	_print(_string)
end

isRunning = true
currentScroll = 0
maxScroll = 0
pageHeight = 0

searchBox = nil
featuredBannerTimer = nil

Values = {
	ToolbarHeight = 2,
}

Current = {
	CursorBlink = false,
	CursorPos = {},
	CursorColour = colours.black
}


--This is my drawing API, is is pretty much identical to what drives PearOS.
local _w, _h = term.getSize()
Drawing = {
	
	Screen = {
		Width = _w,
		Height = _h
	},

	DrawCharacters = function (x, y, characters, textColour,bgColour)
		Drawing.WriteStringToBuffer(x, y, characters, textColour, bgColour)
	end,
	
	DrawBlankArea = function (x, y, w, h, colour)
		Drawing.DrawArea (x, y, w, h, " ", 1, colour)
	end,

	DrawArea = function (x, y, w, h, character, textColour, bgColour)
		--width must be greater than 1, other wise we get a stack overflow
		if w < 0 then
			w = w * -1
		elseif w == 0 then
			w = 1
		end

		for ix = 1, w do
			local currX = x + ix - 1
			for iy = 1, h do
				local currY = y + iy - 1
				Drawing.WriteToBuffer(currX, currY, character, textColour, bgColour)
			end
		end
	end,

	DrawImage = function(x,y,tImage)
		for _y=1, #tImage do
			for _x=1, tImage[_y]:len()/3 do
				local char = string.sub(tImage[_y],_x*3, (_x*3))
				local textColour = Drawing.GetColour(string.byte(tImage[_y],(_x*3)-1,(_x*3)-1)  or 0)
				local bgColour = Drawing.GetColour(string.byte(tImage[_y],(_x*3)-2,(_x*3)-2)  or f)
				Drawing.WriteToBuffer(x+_x-1, y+_y-1, char, textColour, bgColour)
			end
		end
	end,

	DrawCharactersCenter = function(x, y, w, h, characters, textColour,bgColour)
		w = w or Drawing.Screen.Width
		h = h or Drawing.Screen.Height
		x = x or math.floor((w - #characters) / 2)
		y = y or math.floor(h / 2)

		Drawing.DrawCharacters(x, y, characters, textColour, bgColour)
	end,



	GetColour = function(str)
		local colours = {}
		for n=1,16 do
			colours[ string.byte( "0123456789abcdef",n,n ) ] = 2^(n-1)
		end
		return colours[str]
	end,

	Clear = function (_colour)
		_colour = _colour or colours.black
		Drawing.ClearBuffer()
		Drawing.DrawBlankArea(1, 1, Drawing.Screen.Width, Drawing.Screen.Height, _colour)
	end,

	Buffer = {},
	BackBuffer = {},

	DrawBuffer = function()
		for y,row in pairs(Drawing.Buffer) do
			for x,pixel in pairs(row) do
				local shouldDraw = true
				local hasBackBuffer = true
				if Drawing.BackBuffer[y] == nil or Drawing.BackBuffer[y][x] == nil or #Drawing.BackBuffer[y][x] ~= 3 then
					hasBackBuffer = false
				end
				if hasBackBuffer and Drawing.BackBuffer[y][x][1] == Drawing.Buffer[y][x][1] and Drawing.BackBuffer[y][x][2] == Drawing.Buffer[y][x][2] and Drawing.BackBuffer[y][x][3] == Drawing.Buffer[y][x][3] then
					shouldDraw = false
				end
				if shouldDraw then
					term.setBackgroundColour(pixel[3])
					term.setTextColour(pixel[2])
					term.setCursorPos(x, y)
					term.write(pixel[1])
				end
			end
		end
		Drawing.BackBuffer = Drawing.Buffer
		Drawing.Buffer = {}
		term.setCursorPos(1,10)
	end,

	ClearBuffer = function()
		Drawing.Buffer = {}
	end,

	Offset = {
		X = 0,
		Y = 0,
	},

	SetOffset = function(x, y)
		Drawing.Offset.X = x
		Drawing.Offset.Y = y
	end,

	ClearOffset = function()
		Drawing.Offset = {
			X = 0,
			Y = 0,
		}
	end,

	WriteStringToBuffer = function (x, y, characters, textColour,bgColour)
		for i = 1, #characters do
   			local character = characters:sub(i,i)
   			Drawing.WriteToBuffer(x + i - 1, y, character, textColour, bgColour)
		end
	end,

	WriteToBuffer = function(x, y, character, textColour,bgColour)
		x = x + Drawing.Offset.X
		y = y + Drawing.Offset.Y
		Drawing.Buffer[y] = Drawing.Buffer[y] or {}
		Drawing.Buffer[y][x] = {character, textColour, bgColour}
	end

}

SearchPage = {
	X = 0,
	Y = 0,
	Width = 0,
	Height = 3,
	Text = "",
	Placeholder = "Search...",
	CursorPos = 1,

	Draw = function(self)
		Drawing.DrawBlankArea(self.X+1, self.Y+1, self.Width-6, self.Height, colours.grey)
		Drawing.DrawBlankArea(self.X, self.Y, self.Width-6, self.Height, colours.white)


		Drawing.DrawBlankArea(self.X + self.Width - 5 + 1, self.Y + 1, 6, self.Height, colours.grey)
		Drawing.DrawBlankArea(self.X + self.Width - 5, self.Y, 6, self.Height, colours.blue)
		Drawing.DrawCharacters(self.X + self.Width - 3, self.Y + 1, "GO", colours.white, colours.blue)

		RegisterClick(self.X + self.Width - 5, self.Y, 6, self.Height, function() 
			ChangePage('Search Results', self.Text)
		end)

		if self.Text == "" then
			Drawing.DrawCharacters(self.X+1, self.Y+1, self.Placeholder, colours.lightGrey, colours.white)
		else
			Drawing.DrawCharacters(self.X+1, self.Y+1, self.Text, colours.black, colours.white)
		end

		Current.CursorBlink = true
		Current.CursorPos = {self.X+self.CursorPos, self.Y+3}
		Current.CursorColour = colours.black

 	end,

	Initialise = function(self)
		local new = {}    -- the new instance
		setmetatable( new, {__index = self} )
		new.Y = math.floor((Drawing.Screen.Height - 1 - new.Height) / 2)
		new.X = 2
		new.Width = Drawing.Screen.Width - 4
		return new
	end
}

FeaturedBanner = {
	X = 0,
	Y = 0,
	Width = 0,
	Height = 14,
	Images = {},
	AppIDs = {},
	CurrentImage = 1,

	Draw = function(self)
		Drawing.DrawBlankArea(self.X+1, self.Y+1, self.Width, self.Height, colours.grey)
		Drawing.DrawBlankArea(self.X, self.Y, self.Width, self.Height, colours.white)
		Drawing.DrawImage(self.X, self.Y, self.Images[self.CurrentImage])		
		RegisterClick(self.X + Drawing.Offset.X, self.Y + Drawing.Offset.Y, self.Width, self.Height, function()
			ChangePage('more-info', self.AppIDs[self.CurrentImage])
		end)
 	end,

 	NextPage = function(self)
 		self.CurrentImage = self.CurrentImage + 1
 		if self.CurrentImage > #self.Images then
 			self.CurrentImage = 1
 		end
 	end,

	Initialise = function(self, Images, AppIDs)
		local new = {}    -- the new instance
		setmetatable( new, {__index = self} )
		new.Y = 1
		new.X = 2
		new.Width = Drawing.Screen.Width - 4
		new.Images = Images
		new.AppIDs = AppIDs
		return new
	end
}

ListItem = {
	X = 0,
	Y = 0,
	XMargin = 1,
	YMargin = 1,
	Width = 0,
	Height = 6,
	AppID = 0,
	Title = '',
	Author = '',
	Rating = 0,
	Description = {},
	Icon = {},
	Downloads = 0,
	Category = '?',
	Version = 1,
	Type = 0, --0 = app list item, 1 = more info, 2 category

	explode = function(div,str)
	    if (div=='') then return false end
	    local pos,arr = 0,{}
	    for st,sp in function() return string.find(str,div,pos,true) end do
	        table.insert(arr,string.sub(str,pos,st-1))
	        pos = sp + 1
	    end
	    table.insert(arr,string.sub(str,pos))
	    return arr
	end,

	CalculateWrapping = function(self, text)

		local numberOfLines = false

		if self.Type == 0 then
			numberOfLines = 2
		end
		
		local textWidth = self.Width - 8

		local lines = {''}
        for word, space in text:gmatch('(%S+)(%s*)') do
                local temp = lines[#lines] .. word .. space:gsub('\n','')
                if #temp > textWidth then
                        table.insert(lines, '')
                end
                if space:find('\n') then
                        lines[#lines] = lines[#lines] .. word
                        
                        space = space:gsub('\n', function()
                                table.insert(lines, '')
                                return ''
                        end)
                else
                        lines[#lines] = lines[#lines] .. word .. space
                end
        end
        --table.remove(lines,1)

        if not numberOfLines then
        	return lines
        else
        	local _lines = {}
        	for i, v in ipairs(lines) do
        		_lines[i] = v
        		if i >= numberOfLines then
        			return _lines
        		end
        	end
        end
	end,
	Draw = function(self)
		--register clicks
		--install

		local installPos = 1

		if self.Type == 1 then
			installPos = 2
		end

		RegisterClick(self.Width - 7, self.Y + Drawing.Offset.Y + installPos - 1, 9, 1, function()
			Load("Installing App", function()
				api.installApplication(tonumber(self.AppID),"/install/")
			end)
			Load("Application Installed!", function()
				sleep(1)
			end)
		end)

		--more info
		if self.Type == 0 then
			RegisterClick(self.X, self.Y + Drawing.Offset.Y, self.Width, self.Height, function()
				ChangePage('more-info',self.AppID)
			end)
		elseif self.Type == 2 then
			RegisterClick(self.X, self.Y + Drawing.Offset.Y, self.Width, self.Height, function()
				ChangePage('Search Results','Voi')
			end)
		end

		Drawing.DrawBlankArea(self.X+1, self.Y+1, self.Width, self.Height, colours.grey)
		Drawing.DrawBlankArea(self.X, self.Y, self.Width, self.Height, colours.white)
		
		--Drawing.DrawBlankArea(self.X+1, self.Y+1, 6, 4, colours.green)
		Drawing.DrawCharacters(self.X + 8, self.Y + 1, self.Title, colours.black, colours.white)
		if self.Type ~= 2 then
			Drawing.DrawCharacters(self.X + 8, self.Y + 2, "by "..self.Author, colours.grey, colours.white)
			Drawing.DrawCharacters(self.Width - 8, self.Y + installPos - 1, " Install ", colours.white, colours.green)
		end

		Drawing.DrawImage(self.X+1, self.Y+1, self.Icon)
		

		if self.Type == 1 then
			Drawing.DrawCharacters(self.X, self.Y + 6, "Category", colours.grey, colours.white)
			Drawing.DrawCharacters(math.ceil(self.X+(8-#self.Category)/2), self.Y + 7, self.Category, colours.grey, colours.white)

			Drawing.DrawCharacters(self.X+1, self.Y + 9, "Dwnlds", colours.grey, colours.white)
			Drawing.DrawCharacters(math.ceil(self.X+(8-#tostring(self.Downloads))/2), self.Y + 10, tostring(self.Downloads), colours.grey, colours.white)

			Drawing.DrawCharacters(self.X+1, self.Y + 12, "Version", colours.grey, colours.white)
			Drawing.DrawCharacters(math.ceil(self.X+(8-#tostring(self.Version))/2), self.Y + 13, tostring(self.Version), colours.grey, colours.white)

		end

		if self.Type ~= 2 then
			--draw the rating
			local starColour = colours.yellow
			local halfColour = colours.lightGrey
			local emptyColour = colours.lightGrey

			local sX = self.X + 8 + #("by "..self.Author) + 1
			local sY = self.Y + 2

				local s1C = emptyColour
				local s1S = " "

				local s2C = emptyColour
				local s2S = " "

				local s3C = emptyColour
				local s3S = " "

				local s4C = emptyColour
				local s4S = " "

				local s5C = emptyColour
				local s5S = " "

			if self.Rating >= .5 then
				s1C = halfColour
				s1S = "#"
			end

			if self.Rating >= 1 then
				s1C = starColour
				s1S = " "
			end


			if self.Rating >= 1.5 then
				s2C = halfColour
				s2S = "#"
			end

			if self.Rating >= 2 then
				s2C = starColour
				s2S = " "
			end

				
			if self.Rating >= 2.5 then
				s3C = halfColour
				s3S = "#"
			end

			if self.Rating >= 3 then
				s3C = starColour
				s3S = " "
			end

				
			if self.Rating >= 3.5 then
				s4C = halfColour
				s4S = "#"
			end

			if self.Rating >= 4 then
				s4C = starColour
				s4S = " "
			end

				
			if self.Rating >= 4.5 then
				s5C = halfColour
				s5S = "#"
			end

			if self.Rating == 5 then
				s5C = starColour
				s5S = " "
			end

			Drawing.DrawCharacters(sX, sY, s1S, starColour, s1C)
			Drawing.DrawCharacters(sX + 2, sY, s2S, starColour, s2C)
			Drawing.DrawCharacters(sX + 4, sY, s3S, starColour, s3C)
			Drawing.DrawCharacters(sX + 6, sY, s4S, starColour, s4C)
			Drawing.DrawCharacters(sX + 8, sY, s5S, starColour, s5C)
		end

		local descPos = 2



		if self.Type == 1 then
			descPos = 3
		elseif self.Type == 2 then
			descPos = 1
		end

		for _,line in ipairs(self.Description) do
			Drawing.DrawCharacters(self.X + 8, self.Y + descPos + _, line, colours.lightGrey, colours.white)
		end
	end,
	Initialise = function(self, y, appid, title, icon, description, author, rating, version, category, downloads, Type)
		Type = Type or 0
		local new = {}    -- the new instance
		setmetatable( new, {__index = self} )
		new.Y = y
		new.Type = Type
		new:UpdateSize()
		new.AppID = appid
		new.Title = title
		new.Icon = self.explode('*', icon)
		new.Icon[5] = nil
		new.Description = new:CalculateWrapping(description)
		new.Author = author
		new.Rating = rating
		new.Version = version
		new.Category = category
		new.Downloads = downloads
		return new
	end,
	UpdateSize = function(self)
		self.X = self.XMargin + 1
		self.Width = Drawing.Screen.Width - 2 * self.XMargin - 2

		if self.Type == 1 then
			self.Height = 15
		end
	end,
}

Clicks = {
	
}

function RegisterClick(x, y, width, height, action)
	table.insert(Clicks,{
		X = x,
		Y = y,
		Width = width,
		Height = height,
		Action = action
	})
end

function Load(title, func)
	Drawing.DrawBlankArea(1, 1, Drawing.Screen.Width+1, Drawing.Screen.Height+1, colours.lightGrey)
	Drawing.DrawCharactersCenter(nil, Drawing.Screen.Height/2, nil, nil, title, colours.white, colours.lightGrey)
	isLoading = true
	parallel.waitForAny(function()
		func()
		isLoading = false
	end, DisplayLoader)
end

function DisplayLoader()
	local maxStep = 70 -- about 10 seconds, timeout
	local currStep = 0
	local loadStep = 0
	while isLoading do
		local Y = Drawing.Screen.Height/2 + 2
		local cX = Drawing.Screen.Width/2

		Drawing.DrawCharacters(cX-3, Y, ' ', colours.black, colours.grey)
		Drawing.DrawCharacters(cX-1, Y, ' ', colours.black, colours.grey)
		Drawing.DrawCharacters(cX+1, Y, ' ', colours.black, colours.grey)
		Drawing.DrawCharacters(cX+3, Y, ' ', colours.black, colours.grey)
		
		if loadStep ~= -1 then
			Drawing.DrawCharacters(cX-3 + (loadStep * 2), Y, ' ', colours.black, colours.white)		
		end

		loadStep = loadStep + 1
		if loadStep >= 4 then
			loadStep = -1
		end

		currStep = currStep + 1
		if currStep >= maxStep then
			isLoading = false
			error('Load timeout. Check your internet connection and try again. The server may also be down, try again in 10 minutes.')
		end

		Drawing.DrawBuffer()
		sleep(0.15)
	end
end

function Initialise()
	os.loadAPI('api');
	--sleep(0.5)
	--DownloadData()
	ChangePage('Categories')
	
	--print(api.getAllApplications())
	--BuildListItems()
	Draw()
	EventHandler()
end

function ChangePage(title, arg)
	ClearCurrentPage()
	if title == 'Top Charts' then
		LoadList(api.getAllApplications)
	elseif title == 'Search Results' then
		LoadList(function() return api.searchApplications(arg) end)
	elseif title == "Featured" then
		LoadFeatured()
	elseif title == "Categories" then
		LoadCategories()
	elseif title == "more-info" then
		LoadAboutApp(arg)
	elseif title == "Search" then
		LoadSearch()
	end

	currentPage = title

	maxScroll = getMaxScroll()
end

function LoadAboutApp(id)
	Load("Loading Application", function()
		--ClearCurrentPage()
		local app = api.getApplication(id)
		local item = ListItem:Initialise(1, app.id, app.name, app.icon, app.description, app.user.username, app.stars, app.version, app.category, app.downloads, 1)
		table.insert(listItems, item)
	end)

end

function LoadFeatured()
	Load("Loading", function()
		local tApps = api.getFeaturedApplications()

		--all items
		for i, app in ipairs(tApps) do
			local item = ListItem:Initialise(1+(i-1)*(ListItem.Height + 2), 
				app.id, app.name, app.icon, app.description,
				 app.user.username, app.stars, app.version,
				  app.category, app.downloads)
			table.insert(listItems, item)
		end
	end)	
end

function LoadCategories()
	Load("Loading", function()
		local tApps = api.getCategories()
		local i = 1
		for name, category in pairs(tApps) do
			local item = ListItem:Initialise(1+(i-1)*(ListItem.Height + 2), 
				0, name, category.icon, category.description, nil, nil, nil, nil, nil, 2)
			table.insert(listItems, item)
			i = i + 1
		end
	end)
end

function LoadSearch(id)
		local item = SearchPage:Initialise()
		searchBox = item
		--featuredBannerTimer = os.startTimer(5)
		table.insert(listItems, item)

end

function ClearCurrentPage()
	--listItems = {}
	for i,v in ipairs(listItems) do listItems[i]=nil end
	currentScroll = 0
	searchBox = nil
	featuredBannerTimer = nil
	Draw()
end

function LoadList(func)
	Load("Loading", function()
		local tApps = api.getAllApplications()--textutils.unserialize(func())
		for i, app in ipairs(tApps) do
			local item = ListItem:Initialise(1+(i-1)*(ListItem.Height + 2), 
				app.id, app.name, app.icon, app.description,
				 app.user.username, app.stars, app.version,
				  app.category, app.downloads)
			table.insert(listItems, item)
		end
	end)
end

function Draw()
	Clicks = {}
	Drawing.Clear(colours.lightGrey)
	DrawList()
	DrawToolbar()
	
	if isMenuVisible then	
		DrawMenu()
	end

	--DrawScrollbar()

	Drawing.DrawBuffer()

	if Current.CursorPos and Current.CursorPos[1] and Current.CursorPos[2] then
		term.setCursorPos(unpack(Current.CursorPos))
	end
	term.setTextColour(Current.CursorColour)
	term.setCursorBlink(Current.CursorBlink)
end

function DrawList()
	Drawing.SetOffset(0, -currentScroll + 2)
		for i, v in ipairs(listItems) do
			v:Draw()
		end
	Drawing.ClearOffset()
end

function DrawScrollbar()

	local scrollBarHeight = Drawing.Screen.Height - 1
	local scrollBarPosition = 0

	if pageHeight > 0 and maxScroll > 0 then
		scrollBarHeight = (Drawing.Screen.Height / pageHeight) * (Drawing.Screen.Height - 1)
		scrollBarPosition = (currentScroll / pageHeight) * (Drawing.Screen.Height - 1)
	end


	print(scrollBarHeight)
	print(scrollBarPosition)
	--sleep(0.3)
	Drawing.DrawBlankArea(Drawing.Screen.Width, scrollBarPosition + 2, 1, scrollBarHeight, colours.blue)


	Drawing.DrawCharacters(Drawing.Screen.Width, scrollBarPosition + 2, "-", colours.black,colours.white)

	Drawing.DrawCharacters(Drawing.Screen.Width-1, 2, "+", colours.black,colours.white)

	--Drawing.DrawBuffer()

	Drawing.DrawBlankArea(51, 2, 1, 18, colours.green)


end

function DrawToolbar()
	Drawing.DrawBlankArea(1, 1, Drawing.Screen.Width, 1, colours.white)
	local items = {
		{
			active = false,
			title = "Featured"
		},
		{
			active = false,
			title = "Top Charts"
		},
		{
			active = false,
			title = "Categories"
		},
		{
			active = false,
			title = "Search"
		}
	}
	local itemsLength = 0
	local itemsString = ""
	for i, v in ipairs(items) do
		itemsLength = itemsLength + #v.title + 3
		itemsString = itemsString .. v.title .. " | "
	end
	itemsLength = itemsLength - 3
	
	local itemX = (Drawing.Screen.Width - itemsLength) / 2

	for i, v in ipairs(items) do
		local border = " | "
		if i == #items then
			border = ""
		end
		Drawing.DrawCharacters(itemX, 1, v.title .. border, colours.blue, colours.white)
		RegisterClick(itemX-1, 1, #v.title + 2, 1, function()
			ChangePage(v.title)
		end)
		itemX = itemX + #(v.title .. border)
	end
	Drawing.DrawCharacters(Drawing.Screen.Width, 1, "=", colours.blue, colours.white)

	RegisterClick(Drawing.Screen.Width-1, 1, 2, 1, function()
		isMenuVisible = not isMenuVisible
	end)
end

function DrawMenu()
	local items = {
		{
			title = "Login",
			action = nil
		},
		{
			title = "Settings",
			action = nil
		}
	}

	local menuWidth = 0

	for i, v in ipairs(items) do
		if #v.title + 2 > menuWidth then
			menuWidth = #v.title + 2
		end
	end

	Drawing.DrawBlankArea(Drawing.Screen.Width-menuWidth+2, 3, menuWidth, #items + 2, colours.grey)
	Drawing.DrawBlankArea(Drawing.Screen.Width-menuWidth+1, 2, menuWidth, #items + 2, colours.white)

	local y = 2
	local x = Drawing.Screen.Width+2-menuWidth
	for i, v in ipairs(items) do
		Drawing.DrawCharacters(x, y+i, v.title, colours.black, colours.white)
		RegisterClick(x-1, y+i, #v.title + 2, 1, function() 
			ChangePage(v.title)
		end)
	end
end

function getMaxScroll()
	local totalHeight = 0
	for i, v in ipairs(listItems) do
		totalHeight = totalHeight + v.Height + 2
	end

	local s = totalHeight - Drawing.Screen.Height + 2
		
	if s < 0 then
		s = 0
	end

	pageHeight = totalHeight

	return s
end

function setScroll(iScroll)
	maxScroll = getMaxScroll()
	currentScroll = iScroll
	if currentScroll < 0 then
		currentScroll = 0
	elseif currentScroll > maxScroll then
		currentScroll = maxScroll
	end
end

function EventHandler()
	while isRunning do
		local event, arg, x, y = os.pullEvent()
		if arg == "q" then
			os.reboot()
		end

		if arg == "w" then
			isRunning = false
			term.setBackgroundColour(colours.black)
			term.setTextColour(colours.white)
			print = _print
			print('Finnished')
		end

		if arg == "e" then
			term.setBackgroundColour(colours.red)
			term.clear()
		end


		if event == "mouse_scroll" then
			setScroll(currentScroll + arg)

			Draw()
			print(currentScroll)
			print(maxScroll)

		elseif event == "timer" then
			if arg == featuredBannerTimer and currentPage == 'Featured' then

				--featuredBannerTimer = os.startTimer(5)
				listItems[1]:NextPage()
				Draw()
			end
		elseif event == "char" then
			if currentPage == 'Search' then
				searchBox.Text = searchBox.Text .. arg
				searchBox.CursorPos = searchBox.CursorPos + 1
				Draw()
			end
		elseif event == "key" then
			if arg == keys.down then
				setScroll(currentScroll + 4)
				Draw()

			elseif arg == keys.up then
				setScroll(currentScroll - 4)
				Draw()
			end

			if arg == keys.backspace and currentPage == 'Search' then
				searchBox.Text = string.sub(searchBox.Text,0,#searchBox.Text-1)
				searchBox.CursorPos = searchBox.CursorPos - 1
				if searchBox.CursorPos < 1 then
					searchBox.CursorPos = 1
				end
				Draw()
			end

		elseif event == "mouse_click" then
			local clicked = false
			for i, v in ipairs(Clicks) do
				if not clicked and x >= v.X and (v.X + v.Width) > x and y >= v.Y and (v.Y + v.Height) > y then
					clicked = true

					local iMV = isMenuVisible
					v:Action()

					if iMV == isMenuVisible then
						isMenuVisible = false
					end

					Draw()
				end
			end

			if not clicked then
				isMenuVisible = false
				Draw()
			end
		end



	end
end


if term.isColor and term.isColor() then



	-- Run main function
	local _, err = pcall(Initialise)
	if err then
		-- Make a nice error handling screen here...
		print = _print
		term.setBackgroundColor(colours.lightGrey)
		term.setTextColor(colours.white)
		term.clear()


		term.setBackgroundColor(colours.grey)
		term.setCursorPos(1, 2)
		term.clearLine()
		term.setCursorPos(1, 3)
		term.clearLine()
		term.setCursorPos(1, 4)
		term.clearLine()
		term.setCursorPos(3, 3)

		print("The ComputerCraft App Store has crashed!\n\n")

		term.setBackgroundColor(colours.lightGrey)
		print("Try repeating what you just did, if this is the second time you've seen this message go to")
		term.setTextColor(colours.black)
		print("http://ccappstore.comyr.com/help/crash/\n")
		term.setTextColor(colours.white)		
		print("The error was:")

		term.setTextColor(colours.black)
		print(" " .. tostring(err) .. "\n\n")

		term.setTextColor(colours.white)
		print(" Press any key to exit...")
		local ev = os.pullEvent("###")
		print(ev)
		print('**')
		sleep(5)
		OneOS.Close()
	end

else
	print('The App Store requires an Advanced (gold) Computer!')
end

