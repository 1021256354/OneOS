--[[

ComputerCraft AppStore API by oeed
For documentation on how to use it go to ccappstore.comyr.com/help/api/

]]--

local function contains(table, element)
  for _, value in pairs(table) do
    if value == element then
      return true
    end
  end
  return false
end

local apiURL = "http://ccappstore.comyr.com/api/"

local function checkHTTP()
	if http then
		return true
	else
		return false
	end
end

local function requireHTTP()
	if checkHTTP() then
		return true
	else
		error("The 'http' API is not enabled!")
	end
end

function doRequest(command, subcommand, values)
	values = values or {}
	requireHTTP()

	local url = apiURL .. "?command=" .. command .."&subcommand=" .. subcommand
	for k, v in pairs(values) do
		url = url .. "&" .. k .. "=" .. v
	end
	local request = http.get(url)
	if request then
		local response = request.readAll()
		request.close()
		if response == "<h2>The server is too busy at the moment.</h2><p>Please reload this page few seconds later.</p>" then
			error("Server is too busy at the moment.")
		end
		return textutils.unserialize(response)
	end
	return nil
end

function getAllApplications()
	return doRequest('application', 'all')
end

function getApplicationsInCategory(name)
	return doRequest('application', 'category', {name = name})
end

function getFeaturedApplications()
	return doRequest('application', 'featured')
end

function getApplication(id)
	return doRequest('application', 'get', {id = id})
end

function getCategories(id)
	return doRequest('application', 'categories')
end

function addApplication(username, password, serializeddata, name, description, sdescription, category)
	return doRequest('application', 'add', {username = username, password = password, serializeddata = serializeddata, name = name, description = description, sdescription = sdescription, category = category})
end

function deleteApplication(id, username, password)
	return doRequest('application', 'delete', {id = id, username = username, password = password})
end

function updateApplication(id, username, password, serializeddata, name, description, sdescription, category)
	return doRequest('application', 'update', {id = id, username = username, password = password, serializeddata = serializeddata, name = name, description = description, sdescription = sdescription, category = category})
end

function addChangeLogToApplication(id, username, password, changelog, version)
	return doRequest('application', 'addchangelog', {id = id, username = username, password = password, changelog = changelog, version = version})
end

function downloadApplication(id)
	return doRequest('application', 'download', {id = id})
end

function searchApplications(name)
	return doRequest('application', 'search', {name = name})
end

function getAllNews()
	return doRequest('news', 'all')
end

function getNews(id)
	return doRequest('news', 'get', {id = id})
end

function getInstalledApplications(id)
	return doRequest('computer', 'get', {id = id})
end

local function resolve( _sPath )
	local sStartChar = string.sub( _sPath, 1, 1 )
	if sStartChar == "/" or sStartChar == "\\" then
		return fs.combine( "", _sPath )
	else
		return fs.combine( sDir, _sPath )
	end
end

function saveApplicationIcon(id, path)
	local app = getApplication(id)
	local icon = app.icon
	local h = fs.open(path, 'w', true)
	h.write(icon)
	h.close()
end

function installApplication(id, path, computerid, username, password)
	local package = downloadApplication(id)
	if type(package) ~= 'string' or #package == 0 then
		error('The application did not download correctly or is empty. Try again.')
	end
	local packrun = loadstring(package)
	local env = getfenv()
	setfenv( packrun, env)
	if packrun then
		packrun()

		local function makeFile(_path,_content, true)
		 local file=fs.open(_path,"w", true)
		 file.write(_content)
		 file.close()
		end
		local function makeFolder(_path,_content)
		 fs.makeDir(_path, true)
		 for k,v in pairs(_content) do
		  if type(v)=="table" then
		   makeFolder(_path.."/"..k,v)
		  else
		   makeFile(_path.."/"..k,v)
		  end
		 end
		end
		local sDest= resolve(path) or '/'
		if sDest=="root" then
		 sDest="/"
		end
		makeFolder(sDest,env.pkg)

		if computerid and username and password then
			doRequest('computer', 'install', {id = id, computerid = computerid, username = username, password = password})
		end
	else
		error('The application appears to be corrupt. Try downloading it again.')
	end



	return true
end

function uninstallApplication(id, computerid, username, password)
	--TODO: impliment this later
	return doRequest('computer', 'uninstall', {id = id, computerid = computerid, username = username, password = password})
end

function registerComputer(realid, username, password)
	return doRequest('computer', 'register', {realid = realid, username = username, password = password})
end

function getAllComments(type, id)
	return doRequest('comment', 'get', {ctype = type, ctypeid = id})
end

function getComment(id)
	return doRequest('comment', 'get', {id = id})
end

function deleteComment(id, username, password)
	return doRequest('comment', 'delete', {id = id, username = username, password = password})
end

function addComments()
	return doRequest('comment', 'get', {id = id})
end

function getUser()
	return doRequest('user', 'get', {id = id})
end

function registerUser(username, password, email, mcusername)
	return doRequest('user', 'register', {username = username, password = password, email = email, mcusername = mcusername})
end