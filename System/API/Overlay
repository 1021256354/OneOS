local toolBarColour = colours.white
local toolBarTextColour = colours.black

Elements = {
	
}

function Initialise()
	UpdateButtons()
end

function UpdateButtons()
	if Current.Program then
		toolBarColour = Current.Program.Environment.OneOS.ToolBarColour
		toolBarTextColour = Current.Program.Environment.OneOS.ToolBarTextColour
	else
		toolBarColour = colours.white
		toolBarTextColour = colours.black
	end
	Elements = {}
	InsertMenu("One", {
				{
					Title = 'Desktop',
					Click = function()
						Current.Program = nil
						UpdateButtons()
					end
				},
				{
					Title = 'About OneOS',
					Click = function()
						LaunchProgram('Programs/About OneOS/startup', {}, 'About OneOS')
					end
				},
				{
					Title = 'Settings',
					Click = function()
						LaunchProgram('Programs/Settings/startup', {}, 'Settings')
					end
				},
				{
					Title = 'Help',
					Click = function()
						LaunchProgram('Programs/Help/startup', {}, 'Help')
					end
				},
				
				{
					Separator = true
				},
				{
					Title = 'Update OneOS',
					Click = error
				},

				{
					Separator = true
				},
--[[
				{
					Title = 'Sleep',
					Click = function()
						Sleep()
					end
				},
]]--
				{
					Title = 'Restart',
					Click = os.reboot
				},
				{
					Title = 'Shutdown',
					Click = os.shutdown
				},
			})
	local currentProgramI = 1
	if Current.Programs and #Current.Programs >= 1 then
		for i, program in ipairs(Current.Programs) do
			local textColour = toolBarTextColour
			local activeBackgroundColour = colours.lightBlue

			if not program.Process or coroutine.status(program.Process) == "dead" then
				textColour = toolBarTextColour--colours.grey
				activeBackgroundColour = colours.grey
			end
			
			if not Current.Program or Current.Program ~= program then
				InsertButton(program.Title, false, toolBarColour, activeBackgroundColour, textColour, colours.white, function(self, side, x, y, toggle)
					SwitchToProgram(program, currentProgramI, i)
				end)
			else
				currentProgramI = i
				InsertButton("x "..Current.Program.Title, true, colours.white, activeBackgroundColour, textColour, colours.white, function(self, side, x, y, toggle)
					if x == 2 then
						Current.Program:Close()
					end
					self.Toggle = false
				end)
			end
		end
	end
	Draw()
end

function InsertMenu(title, items)
	local x = 2
	if #Elements ~= 0 then
		local elem = Elements[#Elements]
		x = elem.X + elem.Width + 1
	end

	table.insert(Elements,
	 Button:Initialise(x-1, 1, #title+2, 1, toolBarColour, toolBarTextColour, nil, nil, nil, function(self, side, x, y, toggle)
		local menu = nil
		if toggle then
			menu = Menu:Initialise(1, 2, nil, nil, self, items, true, function()
				if Current.Program then
					Current.Program.AppRedirect:Draw()
				end
			end):Show()
		else
			Current.Menu:Close()
			return false
		end
		return true
	end, title, false))
end

function InsertButton(title, active, backgroundColour, activeBackgroundColour, textColour, activeTextColour, click)
	local x = 2
	if #Elements ~= 0 then
		local elem = Elements[#Elements]
		x = elem.X + elem.Width + 1
	end

	table.insert(Elements, Button:Initialise(x-1, 1, #title+2, 1, backgroundColour, textColour, activeBackgroundColour, activeTextColour,  nil, click, title, active))
end

function Draw()
	if Current.Program then
		toolBarColour = Current.Program.Environment.OneOS.ToolBarColour
		toolBarTextColour = Current.Program.Environment.OneOS.ToolBarTextColour
	else
		toolBarColour = colours.white
		toolBarTextColour = colours.black
	end

	Drawing.DrawBlankArea(1, 1, Drawing.Screen.Width, 1, toolBarColour)

	for i, elem in ipairs(Elements) do
		elem:Draw()
	end

	local timeString = textutils.formatTime(os.time())
	Drawing.DrawCharacters(Drawing.Screen.Width - #timeString, 1, timeString, toolBarTextColour, toolBarColour)
end