	--OneOS uses channels between 4200 and 4300, avoid use where possible

	Channels = {
		Ignored = 4299,
		Ping = 4200,
		PingReply = 4201,
		TurtleRemote = 4202,
		TurtleRemoteReply = 4203,
	}

	local function isOpen(channel)
		return Peripheral.Call('wireless_modem', 'isOpen', channel)
	end

	local function open(channel)
		if not isOpen(channel) then
			Peripheral.Call('wireless_modem', 'open', channel)
		end
	end

	local function close(channel)
		Peripheral.Call('wireless_modem', 'close', channel)
	end

	local function closeAll()
		Peripheral.Call('wireless_modem', 'closeAll')
	end

	local function transmit(channel, replyChannel, message)
		Peripheral.Call('wireless_modem', 'transmit', channel, replyChannel, textutils.serialize(message))
	end

	local function FormatMessage(message, messageID)
		return {
			content = textutils.serialize(message),
			senderID = os.getComputerID(),
			senderName = os.getComputerLabel(),
			channel = channel,
			replyChannel = reply,
			messageID = messageID or math.random(10000)
		}
	end

	local Timeout = function(func, time)
		time = time or 1
		parallel.waitForAny(func, function()
			sleep(time)
			--log('Timeout!'..time)
		end)
	end

	RecieveMessage = function(_channel, messageID, timeout)
		open(_channel)
		local event, side, channel, replyChannel, message = nil
		Timeout(function()
			event, side, channel, replyChannel, message = os.pullEvent('modem_message')
			if channel ~= _channel then
				event, side, channel, replyChannel, message = nil
			else
				message = textutils.unserialize(message)
				message.content = textutils.unserialize(message.content)
				if messageID and messageID ~= message.messageID then
					event, side, channel, replyChannel, message = nil
				end
			end
		end,
		timeout)
		return event, side, channel, replyChannel, message
	end

	Initialise = function()
		for i, c in pairs(Channels) do
			open(c)
		end
	end

	HandleMessage = function(event, side, channel, replyChannel, message, distance)
		message = textutils.unserialize(message)
		message.content = textutils.unserialize(message.content)

		if channel == Channels.Ping then
			if message.content == 'Ping!' then
				SendMessage(replyChannel, 'Pong!', nil, message.messageID)
			end
		elseif Wireless.Responder then
			Wireless.Responder(event, side, channel, replyChannel, message, distance)
		end
	end

	SendMessage = function(channel, message, reply, messageID)
		reply = reply or channel + 1
		open(channel)
		open(reply)
		local _message = FormatMessage(message, messageID)
		transmit(channel, reply, _message)
		return _message
	end

	Ping = function()
		local message = SendMessage(Channels.Ping, 'Ping!', Channels.PingReply)
		RecieveMessage(Channels.PingReply, message.messageID)
	end